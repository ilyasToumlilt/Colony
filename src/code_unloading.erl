%% -*- coding: utf-8 -*-
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.1.9
-module(code_unloading).

-export([encode_msg/1, encode_msg/2]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/2, merge_msgs/3]).
-export([verify_msg/1, verify_msg/2]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([enum_symbol_by_value_ResponseType/1, enum_value_by_symbol_ResponseType/1]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([get_package_name/0]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).

-include("code_unloading.hrl").
-include("gpb.hrl").

%% enumerated types
-type 'ResponseType'() :: 'ATOM' | 'STRING' | 'TUPLE'.
-export_type(['ResponseType'/0]).

%% message types
-type 'CmStoreModule'() :: #'CmStoreModule'{}.
-type 'Response'() :: #'Response'{}.
-type 'CmRemoteProcedureCall'() :: #'CmRemoteProcedureCall'{}.
-export_type(['CmStoreModule'/0, 'Response'/0, 'CmRemoteProcedureCall'/0]).

-spec encode_msg(#'CmStoreModule'{} | #'Response'{} | #'CmRemoteProcedureCall'{}) -> binary().
encode_msg(Msg) -> encode_msg(Msg, []).


-spec encode_msg(#'CmStoreModule'{} | #'Response'{} | #'CmRemoteProcedureCall'{}, list()) -> binary().
encode_msg(Msg, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg, Opts);
      false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case Msg of
      #'CmStoreModule'{} ->
	  e_msg_CmStoreModule(Msg, TrUserData);
      #'Response'{} -> e_msg_Response(Msg, TrUserData);
      #'CmRemoteProcedureCall'{} ->
	  e_msg_CmRemoteProcedureCall(Msg, TrUserData)
    end.



e_msg_CmStoreModule(Msg, TrUserData) ->
    e_msg_CmStoreModule(Msg, <<>>, TrUserData).


e_msg_CmStoreModule(#'CmStoreModule'{module = F1,
				     binary = F2, filepath = F3},
		    Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_bytes(TrF1, <<Bin/binary, 10>>)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_bytes(TrF2, <<B1/binary, 18>>)
	 end,
    begin
      TrF3 = id(F3, TrUserData),
      e_type_bytes(TrF3, <<B2/binary, 26>>)
    end.

e_msg_Response(Msg, TrUserData) ->
    e_msg_Response(Msg, <<>>, TrUserData).


e_msg_Response(#'Response'{error = F1, type = F2,
			   message = F3},
	       Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_bool(TrF1, <<Bin/binary, 8>>)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_enum_ResponseType(TrF2, <<B1/binary, 16>>)
	 end,
    begin
      TrF3 = id(F3, TrUserData),
      e_type_bytes(TrF3, <<B2/binary, 26>>)
    end.

e_msg_CmRemoteProcedureCall(Msg, TrUserData) ->
    e_msg_CmRemoteProcedureCall(Msg, <<>>, TrUserData).


e_msg_CmRemoteProcedureCall(#'CmRemoteProcedureCall'{module
							 = F1,
						     function = F2, args = F3},
			    Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_bytes(TrF1, <<Bin/binary, 10>>)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_bytes(TrF2, <<B1/binary, 18>>)
	 end,
    begin
      TrF3 = id(F3, TrUserData),
      if TrF3 == [] -> B2;
	 true ->
	     e_field_CmRemoteProcedureCall_args(TrF3, B2, TrUserData)
      end
    end.

e_field_CmRemoteProcedureCall_args([Elem | Rest], Bin,
				   TrUserData) ->
    Bin2 = <<Bin/binary, 26>>,
    Bin3 = e_type_bytes(id(Elem, TrUserData), Bin2),
    e_field_CmRemoteProcedureCall_args(Rest, Bin3,
				       TrUserData);
e_field_CmRemoteProcedureCall_args([], Bin,
				   _TrUserData) ->
    Bin.

e_enum_ResponseType('ATOM', Bin) -> <<Bin/binary, 1>>;
e_enum_ResponseType('STRING', Bin) -> <<Bin/binary, 2>>;
e_enum_ResponseType('TUPLE', Bin) -> <<Bin/binary, 3>>;
e_enum_ResponseType(V, Bin) -> e_varint(V, Bin).

e_type_bool(true, Bin) -> <<Bin/binary, 1>>;
e_type_bool(false, Bin) -> <<Bin/binary, 0>>;
e_type_bool(1, Bin) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin) -> <<Bin/binary, 0>>.

e_type_bytes(Bytes, Bin) when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin) when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).


decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    decode_msg_1_catch(Bin, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason:StackTrace -> error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
-ifdef('GPB_PATTERN_STACK').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason:StackTrace -> error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason ->
        StackTrace = erlang:get_stacktrace(),
        error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-endif.

-endif.

decode_msg_2_doit('CmStoreModule', Bin, TrUserData) ->
    d_msg_CmStoreModule(Bin, TrUserData);
decode_msg_2_doit('Response', Bin, TrUserData) ->
    d_msg_Response(Bin, TrUserData);
decode_msg_2_doit('CmRemoteProcedureCall', Bin,
		  TrUserData) ->
    d_msg_CmRemoteProcedureCall(Bin, TrUserData).



d_msg_CmStoreModule(Bin, TrUserData) ->
    dfp_read_field_def_CmStoreModule(Bin, 0, 0,
				     id(undefined, TrUserData),
				     id(undefined, TrUserData),
				     id(undefined, TrUserData), TrUserData).

dfp_read_field_def_CmStoreModule(<<10, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_CmStoreModule_module(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, TrUserData);
dfp_read_field_def_CmStoreModule(<<18, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_CmStoreModule_binary(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, TrUserData);
dfp_read_field_def_CmStoreModule(<<26, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_CmStoreModule_filepath(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, TrUserData);
dfp_read_field_def_CmStoreModule(<<>>, 0, 0, F@_1, F@_2,
				 F@_3, _) ->
    #'CmStoreModule'{module = F@_1, binary = F@_2,
		     filepath = F@_3};
dfp_read_field_def_CmStoreModule(Other, Z1, Z2, F@_1,
				 F@_2, F@_3, TrUserData) ->
    dg_read_field_def_CmStoreModule(Other, Z1, Z2, F@_1,
				    F@_2, F@_3, TrUserData).

dg_read_field_def_CmStoreModule(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_CmStoreModule(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3,
				    TrUserData);
dg_read_field_def_CmStoreModule(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_CmStoreModule_module(Rest, 0, 0, F@_1, F@_2,
				       F@_3, TrUserData);
      18 ->
	  d_field_CmStoreModule_binary(Rest, 0, 0, F@_1, F@_2,
				       F@_3, TrUserData);
      26 ->
	  d_field_CmStoreModule_filepath(Rest, 0, 0, F@_1, F@_2,
					 F@_3, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_CmStoreModule(Rest, 0, 0, F@_1, F@_2, F@_3,
					  TrUserData);
	    1 ->
		skip_64_CmStoreModule(Rest, 0, 0, F@_1, F@_2, F@_3,
				      TrUserData);
	    2 ->
		skip_length_delimited_CmStoreModule(Rest, 0, 0, F@_1,
						    F@_2, F@_3, TrUserData);
	    3 ->
		skip_group_CmStoreModule(Rest, Key bsr 3, 0, F@_1, F@_2,
					 F@_3, TrUserData);
	    5 ->
		skip_32_CmStoreModule(Rest, 0, 0, F@_1, F@_2, F@_3,
				      TrUserData)
	  end
    end;
dg_read_field_def_CmStoreModule(<<>>, 0, 0, F@_1, F@_2,
				F@_3, _) ->
    #'CmStoreModule'{module = F@_1, binary = F@_2,
		     filepath = F@_3}.

d_field_CmStoreModule_module(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_CmStoreModule_module(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, TrUserData);
d_field_CmStoreModule_module(<<0:1, X:7, Rest/binary>>,
			     N, Acc, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {binary:copy(Bytes), Rest2}
			 end,
    dfp_read_field_def_CmStoreModule(RestF, 0, 0, NewFValue,
				     F@_2, F@_3, TrUserData).

d_field_CmStoreModule_binary(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_CmStoreModule_binary(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, TrUserData);
d_field_CmStoreModule_binary(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {binary:copy(Bytes), Rest2}
			 end,
    dfp_read_field_def_CmStoreModule(RestF, 0, 0, F@_1,
				     NewFValue, F@_3, TrUserData).

d_field_CmStoreModule_filepath(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_CmStoreModule_filepath(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
d_field_CmStoreModule_filepath(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {binary:copy(Bytes), Rest2}
			 end,
    dfp_read_field_def_CmStoreModule(RestF, 0, 0, F@_1,
				     F@_2, NewFValue, TrUserData).

skip_varint_CmStoreModule(<<1:1, _:7, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_CmStoreModule(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, TrUserData);
skip_varint_CmStoreModule(<<0:1, _:7, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_CmStoreModule(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, TrUserData).

skip_length_delimited_CmStoreModule(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_CmStoreModule(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, F@_3,
					TrUserData);
skip_length_delimited_CmStoreModule(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_CmStoreModule(Rest2, 0, 0, F@_1,
				     F@_2, F@_3, TrUserData).

skip_group_CmStoreModule(Bin, FNum, Z2, F@_1, F@_2,
			 F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_CmStoreModule(Rest, 0, Z2, F@_1,
				     F@_2, F@_3, TrUserData).

skip_32_CmStoreModule(<<_:32, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_CmStoreModule(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, TrUserData).

skip_64_CmStoreModule(<<_:64, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_CmStoreModule(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, TrUserData).

d_msg_Response(Bin, TrUserData) ->
    dfp_read_field_def_Response(Bin, 0, 0,
				id(undefined, TrUserData),
				id(undefined, TrUserData),
				id(undefined, TrUserData), TrUserData).

dfp_read_field_def_Response(<<8, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, TrUserData) ->
    d_field_Response_error(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   TrUserData);
dfp_read_field_def_Response(<<16, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, TrUserData) ->
    d_field_Response_type(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			  TrUserData);
dfp_read_field_def_Response(<<26, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, TrUserData) ->
    d_field_Response_message(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     TrUserData);
dfp_read_field_def_Response(<<>>, 0, 0, F@_1, F@_2,
			    F@_3, _) ->
    #'Response'{error = F@_1, type = F@_2, message = F@_3};
dfp_read_field_def_Response(Other, Z1, Z2, F@_1, F@_2,
			    F@_3, TrUserData) ->
    dg_read_field_def_Response(Other, Z1, Z2, F@_1, F@_2,
			       F@_3, TrUserData).

dg_read_field_def_Response(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Response(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_Response(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_Response_error(Rest, 0, 0, F@_1, F@_2, F@_3,
				 TrUserData);
      16 ->
	  d_field_Response_type(Rest, 0, 0, F@_1, F@_2, F@_3,
				TrUserData);
      26 ->
	  d_field_Response_message(Rest, 0, 0, F@_1, F@_2, F@_3,
				   TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_Response(Rest, 0, 0, F@_1, F@_2, F@_3,
				     TrUserData);
	    1 ->
		skip_64_Response(Rest, 0, 0, F@_1, F@_2, F@_3,
				 TrUserData);
	    2 ->
		skip_length_delimited_Response(Rest, 0, 0, F@_1, F@_2,
					       F@_3, TrUserData);
	    3 ->
		skip_group_Response(Rest, Key bsr 3, 0, F@_1, F@_2,
				    F@_3, TrUserData);
	    5 ->
		skip_32_Response(Rest, 0, 0, F@_1, F@_2, F@_3,
				 TrUserData)
	  end
    end;
dg_read_field_def_Response(<<>>, 0, 0, F@_1, F@_2, F@_3,
			   _) ->
    #'Response'{error = F@_1, type = F@_2, message = F@_3}.

d_field_Response_error(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_Response_error(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, F@_3, TrUserData);
d_field_Response_error(<<0:1, X:7, Rest/binary>>, N,
		       Acc, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc =/= 0, Rest},
    dfp_read_field_def_Response(RestF, 0, 0, NewFValue,
				F@_2, F@_3, TrUserData).

d_field_Response_type(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_Response_type(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, F@_3, TrUserData);
d_field_Response_type(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = {d_enum_ResponseType(begin
						<<Res:32/signed-native>> = <<(X
										bsl
										N
										+
										Acc):32/unsigned-native>>,
						Res
					      end),
			  Rest},
    dfp_read_field_def_Response(RestF, 0, 0, F@_1,
				NewFValue, F@_3, TrUserData).

d_field_Response_message(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_Response_message(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, F@_3, TrUserData);
d_field_Response_message(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {binary:copy(Bytes), Rest2}
			 end,
    dfp_read_field_def_Response(RestF, 0, 0, F@_1, F@_2,
				NewFValue, TrUserData).

skip_varint_Response(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_Response(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 TrUserData);
skip_varint_Response(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_Response(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, TrUserData).

skip_length_delimited_Response(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_Response(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
skip_length_delimited_Response(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Response(Rest2, 0, 0, F@_1, F@_2,
				F@_3, TrUserData).

skip_group_Response(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		    TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Response(Rest, 0, Z2, F@_1, F@_2,
				F@_3, TrUserData).

skip_32_Response(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		 F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_Response(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, TrUserData).

skip_64_Response(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		 F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_Response(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, TrUserData).

d_msg_CmRemoteProcedureCall(Bin, TrUserData) ->
    dfp_read_field_def_CmRemoteProcedureCall(Bin, 0, 0,
					     id(undefined, TrUserData),
					     id(undefined, TrUserData),
					     id([], TrUserData), TrUserData).

dfp_read_field_def_CmRemoteProcedureCall(<<10,
					   Rest/binary>>,
					 Z1, Z2, F@_1, F@_2, F@_3,
					 TrUserData) ->
    d_field_CmRemoteProcedureCall_module(Rest, Z1, Z2, F@_1,
					 F@_2, F@_3, TrUserData);
dfp_read_field_def_CmRemoteProcedureCall(<<18,
					   Rest/binary>>,
					 Z1, Z2, F@_1, F@_2, F@_3,
					 TrUserData) ->
    d_field_CmRemoteProcedureCall_function(Rest, Z1, Z2,
					   F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_CmRemoteProcedureCall(<<26,
					   Rest/binary>>,
					 Z1, Z2, F@_1, F@_2, F@_3,
					 TrUserData) ->
    d_field_CmRemoteProcedureCall_args(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, TrUserData);
dfp_read_field_def_CmRemoteProcedureCall(<<>>, 0, 0,
					 F@_1, F@_2, R1, TrUserData) ->
    #'CmRemoteProcedureCall'{module = F@_1, function = F@_2,
			     args = lists_reverse(R1, TrUserData)};
dfp_read_field_def_CmRemoteProcedureCall(Other, Z1, Z2,
					 F@_1, F@_2, F@_3, TrUserData) ->
    dg_read_field_def_CmRemoteProcedureCall(Other, Z1, Z2,
					    F@_1, F@_2, F@_3, TrUserData).

dg_read_field_def_CmRemoteProcedureCall(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_CmRemoteProcedureCall(Rest, N + 7,
					    X bsl N + Acc, F@_1, F@_2, F@_3,
					    TrUserData);
dg_read_field_def_CmRemoteProcedureCall(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_CmRemoteProcedureCall_module(Rest, 0, 0, F@_1,
					       F@_2, F@_3, TrUserData);
      18 ->
	  d_field_CmRemoteProcedureCall_function(Rest, 0, 0, F@_1,
						 F@_2, F@_3, TrUserData);
      26 ->
	  d_field_CmRemoteProcedureCall_args(Rest, 0, 0, F@_1,
					     F@_2, F@_3, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_CmRemoteProcedureCall(Rest, 0, 0, F@_1,
						  F@_2, F@_3, TrUserData);
	    1 ->
		skip_64_CmRemoteProcedureCall(Rest, 0, 0, F@_1, F@_2,
					      F@_3, TrUserData);
	    2 ->
		skip_length_delimited_CmRemoteProcedureCall(Rest, 0, 0,
							    F@_1, F@_2, F@_3,
							    TrUserData);
	    3 ->
		skip_group_CmRemoteProcedureCall(Rest, Key bsr 3, 0,
						 F@_1, F@_2, F@_3, TrUserData);
	    5 ->
		skip_32_CmRemoteProcedureCall(Rest, 0, 0, F@_1, F@_2,
					      F@_3, TrUserData)
	  end
    end;
dg_read_field_def_CmRemoteProcedureCall(<<>>, 0, 0,
					F@_1, F@_2, R1, TrUserData) ->
    #'CmRemoteProcedureCall'{module = F@_1, function = F@_2,
			     args = lists_reverse(R1, TrUserData)}.

d_field_CmRemoteProcedureCall_module(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_CmRemoteProcedureCall_module(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, F@_3,
					 TrUserData);
d_field_CmRemoteProcedureCall_module(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {binary:copy(Bytes), Rest2}
			 end,
    dfp_read_field_def_CmRemoteProcedureCall(RestF, 0, 0,
					     NewFValue, F@_2, F@_3, TrUserData).

d_field_CmRemoteProcedureCall_function(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_CmRemoteProcedureCall_function(Rest, N + 7,
					   X bsl N + Acc, F@_1, F@_2, F@_3,
					   TrUserData);
d_field_CmRemoteProcedureCall_function(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {binary:copy(Bytes), Rest2}
			 end,
    dfp_read_field_def_CmRemoteProcedureCall(RestF, 0, 0,
					     F@_1, NewFValue, F@_3, TrUserData).

d_field_CmRemoteProcedureCall_args(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_CmRemoteProcedureCall_args(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, F@_3,
				       TrUserData);
d_field_CmRemoteProcedureCall_args(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {binary:copy(Bytes), Rest2}
			 end,
    dfp_read_field_def_CmRemoteProcedureCall(RestF, 0, 0,
					     F@_1, F@_2,
					     cons(NewFValue, Prev, TrUserData),
					     TrUserData).

skip_varint_CmRemoteProcedureCall(<<1:1, _:7,
				    Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_CmRemoteProcedureCall(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, TrUserData);
skip_varint_CmRemoteProcedureCall(<<0:1, _:7,
				    Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_CmRemoteProcedureCall(Rest, Z1, Z2,
					     F@_1, F@_2, F@_3, TrUserData).

skip_length_delimited_CmRemoteProcedureCall(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, F@_2, F@_3,
					    TrUserData)
    when N < 57 ->
    skip_length_delimited_CmRemoteProcedureCall(Rest, N + 7,
						X bsl N + Acc, F@_1, F@_2, F@_3,
						TrUserData);
skip_length_delimited_CmRemoteProcedureCall(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, F@_2, F@_3,
					    TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_CmRemoteProcedureCall(Rest2, 0, 0,
					     F@_1, F@_2, F@_3, TrUserData).

skip_group_CmRemoteProcedureCall(Bin, FNum, Z2, F@_1,
				 F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_CmRemoteProcedureCall(Rest, 0, Z2,
					     F@_1, F@_2, F@_3, TrUserData).

skip_32_CmRemoteProcedureCall(<<_:32, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_CmRemoteProcedureCall(Rest, Z1, Z2,
					     F@_1, F@_2, F@_3, TrUserData).

skip_64_CmRemoteProcedureCall(<<_:64, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_CmRemoteProcedureCall(Rest, Z1, Z2,
					     F@_1, F@_2, F@_3, TrUserData).

d_enum_ResponseType(1) -> 'ATOM';
d_enum_ResponseType(2) -> 'STRING';
d_enum_ResponseType(3) -> 'TUPLE';
d_enum_ResponseType(V) -> V.

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New) -> merge_msgs(Prev, New, []).

merge_msgs(Prev, New, Opts)
    when element(1, Prev) =:= element(1, New) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case Prev of
      #'CmStoreModule'{} ->
	  merge_msg_CmStoreModule(Prev, New, TrUserData);
      #'Response'{} ->
	  merge_msg_Response(Prev, New, TrUserData);
      #'CmRemoteProcedureCall'{} ->
	  merge_msg_CmRemoteProcedureCall(Prev, New, TrUserData)
    end.

merge_msg_CmStoreModule(#'CmStoreModule'{},
			#'CmStoreModule'{module = NFmodule, binary = NFbinary,
					 filepath = NFfilepath},
			_) ->
    #'CmStoreModule'{module = NFmodule, binary = NFbinary,
		     filepath = NFfilepath}.

merge_msg_Response(#'Response'{},
		   #'Response'{error = NFerror, type = NFtype,
			       message = NFmessage},
		   _) ->
    #'Response'{error = NFerror, type = NFtype,
		message = NFmessage}.

merge_msg_CmRemoteProcedureCall(#'CmRemoteProcedureCall'{args
							     = PFargs},
				#'CmRemoteProcedureCall'{module = NFmodule,
							 function = NFfunction,
							 args = NFargs},
				TrUserData) ->
    #'CmRemoteProcedureCall'{module = NFmodule,
			     function = NFfunction,
			     args =
				 if PFargs /= undefined, NFargs /= undefined ->
					'erlang_++'(PFargs, NFargs, TrUserData);
				    PFargs == undefined -> NFargs;
				    NFargs == undefined -> PFargs
				 end}.


verify_msg(Msg) -> verify_msg(Msg, []).

verify_msg(Msg, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case Msg of
      #'CmStoreModule'{} ->
	  v_msg_CmStoreModule(Msg, ['CmStoreModule'], TrUserData);
      #'Response'{} ->
	  v_msg_Response(Msg, ['Response'], TrUserData);
      #'CmRemoteProcedureCall'{} ->
	  v_msg_CmRemoteProcedureCall(Msg,
				      ['CmRemoteProcedureCall'], TrUserData);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-dialyzer({nowarn_function,v_msg_CmStoreModule/3}).
v_msg_CmStoreModule(#'CmStoreModule'{module = F1,
				     binary = F2, filepath = F3},
		    Path, _) ->
    v_type_bytes(F1, [module | Path]),
    v_type_bytes(F2, [binary | Path]),
    v_type_bytes(F3, [filepath | Path]),
    ok.

-dialyzer({nowarn_function,v_msg_Response/3}).
v_msg_Response(#'Response'{error = F1, type = F2,
			   message = F3},
	       Path, _) ->
    v_type_bool(F1, [error | Path]),
    v_enum_ResponseType(F2, [type | Path]),
    v_type_bytes(F3, [message | Path]),
    ok.

-dialyzer({nowarn_function,v_msg_CmRemoteProcedureCall/3}).
v_msg_CmRemoteProcedureCall(#'CmRemoteProcedureCall'{module
							 = F1,
						     function = F2, args = F3},
			    Path, _) ->
    v_type_bytes(F1, [module | Path]),
    v_type_bytes(F2, [function | Path]),
    if is_list(F3) ->
	   _ = [v_type_bytes(Elem, [args | Path]) || Elem <- F3],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, bytes}, F3,
			 [args | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_enum_ResponseType/2}).
v_enum_ResponseType('ATOM', _Path) -> ok;
v_enum_ResponseType('STRING', _Path) -> ok;
v_enum_ResponseType('TUPLE', _Path) -> ok;
v_enum_ResponseType(V, Path) when is_integer(V) ->
    v_type_sint32(V, Path);
v_enum_ResponseType(X, Path) ->
    mk_type_error({invalid_enum, 'ResponseType'}, X, Path).

-dialyzer({nowarn_function,v_type_sint32/2}).
v_type_sint32(N, _Path)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_sint32(N, Path) when is_integer(N) ->
    mk_type_error({value_out_of_range, sint32, signed, 32},
		  N, Path);
v_type_sint32(X, Path) ->
    mk_type_error({bad_integer, sint32, signed, 32}, X,
		  Path).

-dialyzer({nowarn_function,v_type_bool/2}).
v_type_bool(false, _Path) -> ok;
v_type_bool(true, _Path) -> ok;
v_type_bool(0, _Path) -> ok;
v_type_bool(1, _Path) -> ok;
v_type_bool(X, Path) ->
    mk_type_error(bad_boolean_value, X, Path).

-dialyzer({nowarn_function,v_type_bytes/2}).
v_type_bytes(B, _Path) when is_binary(B) -> ok;
v_type_bytes(B, _Path) when is_list(B) -> ok;
v_type_bytes(X, Path) ->
    mk_type_error(bad_binary_value, X, Path).

-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


-dialyzer({nowarn_function,prettify_path/1}).
prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(lists:append(lists:join(".",
					 lists:map(fun atom_to_list/1,
						   lists:reverse(PathR))))).


-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.

get_msg_defs() ->
    [{{enum, 'ResponseType'},
      [{'ATOM', 1}, {'STRING', 2}, {'TUPLE', 3}]},
     {{msg, 'CmStoreModule'},
      [#field{name = module, fnum = 1, rnum = 2, type = bytes,
	      occurrence = required, opts = []},
       #field{name = binary, fnum = 2, rnum = 3, type = bytes,
	      occurrence = required, opts = []},
       #field{name = filepath, fnum = 3, rnum = 4,
	      type = bytes, occurrence = required, opts = []}]},
     {{msg, 'Response'},
      [#field{name = error, fnum = 1, rnum = 2, type = bool,
	      occurrence = required, opts = []},
       #field{name = type, fnum = 2, rnum = 3,
	      type = {enum, 'ResponseType'}, occurrence = required,
	      opts = []},
       #field{name = message, fnum = 3, rnum = 4, type = bytes,
	      occurrence = required, opts = []}]},
     {{msg, 'CmRemoteProcedureCall'},
      [#field{name = module, fnum = 1, rnum = 2, type = bytes,
	      occurrence = required, opts = []},
       #field{name = function, fnum = 2, rnum = 3,
	      type = bytes, occurrence = required, opts = []},
       #field{name = args, fnum = 3, rnum = 4, type = bytes,
	      occurrence = repeated, opts = []}]}].


get_msg_names() ->
    ['CmStoreModule', 'Response', 'CmRemoteProcedureCall'].


get_group_names() -> [].


get_msg_or_group_names() ->
    ['CmStoreModule', 'Response', 'CmRemoteProcedureCall'].


get_enum_names() -> ['ResponseType'].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


fetch_enum_def(EnumName) ->
    case find_enum_def(EnumName) of
      Es when is_list(Es) -> Es;
      error -> erlang:error({no_such_enum, EnumName})
    end.


find_msg_def('CmStoreModule') ->
    [#field{name = module, fnum = 1, rnum = 2, type = bytes,
	    occurrence = required, opts = []},
     #field{name = binary, fnum = 2, rnum = 3, type = bytes,
	    occurrence = required, opts = []},
     #field{name = filepath, fnum = 3, rnum = 4,
	    type = bytes, occurrence = required, opts = []}];
find_msg_def('Response') ->
    [#field{name = error, fnum = 1, rnum = 2, type = bool,
	    occurrence = required, opts = []},
     #field{name = type, fnum = 2, rnum = 3,
	    type = {enum, 'ResponseType'}, occurrence = required,
	    opts = []},
     #field{name = message, fnum = 3, rnum = 4, type = bytes,
	    occurrence = required, opts = []}];
find_msg_def('CmRemoteProcedureCall') ->
    [#field{name = module, fnum = 1, rnum = 2, type = bytes,
	    occurrence = required, opts = []},
     #field{name = function, fnum = 2, rnum = 3,
	    type = bytes, occurrence = required, opts = []},
     #field{name = args, fnum = 3, rnum = 4, type = bytes,
	    occurrence = repeated, opts = []}];
find_msg_def(_) -> error.


find_enum_def('ResponseType') ->
    [{'ATOM', 1}, {'STRING', 2}, {'TUPLE', 3}];
find_enum_def(_) -> error.


enum_symbol_by_value('ResponseType', Value) ->
    enum_symbol_by_value_ResponseType(Value).


enum_value_by_symbol('ResponseType', Sym) ->
    enum_value_by_symbol_ResponseType(Sym).


enum_symbol_by_value_ResponseType(1) -> 'ATOM';
enum_symbol_by_value_ResponseType(2) -> 'STRING';
enum_symbol_by_value_ResponseType(3) -> 'TUPLE'.


enum_value_by_symbol_ResponseType('ATOM') -> 1;
enum_value_by_symbol_ResponseType('STRING') -> 2;
enum_value_by_symbol_ResponseType('TUPLE') -> 3.


get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) ->
    erlang:error({no_such_rpc, ServiceName, RpcName}).


get_package_name() -> undefined.



gpb_version_as_string() ->
    "4.1.9".

gpb_version_as_list() ->
    [4,1,9].
